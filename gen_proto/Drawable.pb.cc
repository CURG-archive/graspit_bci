// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Drawable.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ShapeDrawable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShapeDrawable_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ShapeDrawable_FillPattern_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ShapeDrawable_LineStyle_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ShapeDrawable_ShapeType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DrawableFrame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DrawableFrame_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Drawable_2eproto() {
  protobuf_AddDesc_Drawable_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Drawable.proto");
  GOOGLE_CHECK(file != NULL);
  ShapeDrawable_descriptor_ = file->message_type(0);
  static const int ShapeDrawable_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeDrawable, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeDrawable, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeDrawable, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeDrawable, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeDrawable, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeDrawable, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeDrawable, line_color_argb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeDrawable, line_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeDrawable, line_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeDrawable, fill_pattern_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeDrawable, fill_color_argb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeDrawable, shape_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeDrawable, text_),
  };
  ShapeDrawable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShapeDrawable_descriptor_,
      ShapeDrawable::default_instance_,
      ShapeDrawable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeDrawable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeDrawable, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeDrawable, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShapeDrawable));
  ShapeDrawable_FillPattern_descriptor_ = ShapeDrawable_descriptor_->enum_type(0);
  ShapeDrawable_LineStyle_descriptor_ = ShapeDrawable_descriptor_->enum_type(1);
  ShapeDrawable_ShapeType_descriptor_ = ShapeDrawable_descriptor_->enum_type(2);
  DrawableFrame_descriptor_ = file->message_type(1);
  static const int DrawableFrame_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawableFrame, frame_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawableFrame, shapes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawableFrame, cleardrawables_),
  };
  DrawableFrame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DrawableFrame_descriptor_,
      DrawableFrame::default_instance_,
      DrawableFrame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawableFrame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawableFrame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DrawableFrame));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Drawable_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShapeDrawable_descriptor_, &ShapeDrawable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DrawableFrame_descriptor_, &DrawableFrame::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Drawable_2eproto() {
  delete ShapeDrawable::default_instance_;
  delete ShapeDrawable_reflection_;
  delete DrawableFrame::default_instance_;
  delete DrawableFrame_reflection_;
}

void protobuf_AddDesc_Drawable_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016Drawable.proto\"\361\004\n\rShapeDrawable\022\n\n\002id"
    "\030\001 \002(\005\022\014\n\004name\030\002 \002(\t\022\r\n\005width\030\003 \002(\002\022\016\n\006h"
    "eight\030\004 \002(\002\022\t\n\001x\030\005 \002(\002\022\t\n\001y\030\006 \002(\002\022\027\n\017lin"
    "e_color_argb\030\007 \002(\005\022\022\n\nline_width\030\010 \002(\002\0227"
    "\n\nline_style\030\t \001(\0162\030.ShapeDrawable.LineS"
    "tyle:\tSolidLine\022;\n\014fill_pattern\030\n \001(\0162\032."
    "ShapeDrawable.FillPattern:\tSolidFill\022\027\n\017"
    "fill_color_argb\030\013 \002(\005\022,\n\nshape_type\030\014 \002("
    "\0162\030.ShapeDrawable.ShapeType\022\016\n\004text\030\r \001("
    "\t:\000\"\234\001\n\013FillPattern\022\021\n\rDiagonalLines\020\000\022\022"
    "\n\016FDiagonalLines\020\001\022\023\n\017HorizontalLines\020\002\022"
    "\021\n\rVerticalLines\020\003\022\020\n\014CrossedLines\020\004\022\021\n\r"
    "XCrossedLines\020\005\022\r\n\tSolidFill\020\006\022\n\n\006NoFill"
    "\020\007\"2\n\tLineStyle\022\n\n\006Dashed\020\000\022\n\n\006Dotted\020\001\022"
    "\r\n\tSolidLine\020\002\":\n\tShapeType\022\n\n\006Circle\020\000\022"
    "\r\n\tRectangle\020\001\022\010\n\004Line\020\002\022\010\n\004Text\020\003*\010\010d\020\200"
    "\200\200\200\002\"d\n\rDrawableFrame\022\024\n\014frame_number\030\001 "
    "\002(\005\022\036\n\006shapes\030\002 \003(\0132\016.ShapeDrawable\022\035\n\016c"
    "learDrawables\030\003 \001(\010:\005false", 746);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Drawable.proto", &protobuf_RegisterTypes);
  ShapeDrawable::default_instance_ = new ShapeDrawable();
  DrawableFrame::default_instance_ = new DrawableFrame();
  ShapeDrawable::default_instance_->InitAsDefaultInstance();
  DrawableFrame::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Drawable_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Drawable_2eproto {
  StaticDescriptorInitializer_Drawable_2eproto() {
    protobuf_AddDesc_Drawable_2eproto();
  }
} static_descriptor_initializer_Drawable_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* ShapeDrawable_FillPattern_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShapeDrawable_FillPattern_descriptor_;
}
bool ShapeDrawable_FillPattern_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ShapeDrawable_FillPattern ShapeDrawable::DiagonalLines;
const ShapeDrawable_FillPattern ShapeDrawable::FDiagonalLines;
const ShapeDrawable_FillPattern ShapeDrawable::HorizontalLines;
const ShapeDrawable_FillPattern ShapeDrawable::VerticalLines;
const ShapeDrawable_FillPattern ShapeDrawable::CrossedLines;
const ShapeDrawable_FillPattern ShapeDrawable::XCrossedLines;
const ShapeDrawable_FillPattern ShapeDrawable::SolidFill;
const ShapeDrawable_FillPattern ShapeDrawable::NoFill;
const ShapeDrawable_FillPattern ShapeDrawable::FillPattern_MIN;
const ShapeDrawable_FillPattern ShapeDrawable::FillPattern_MAX;
const int ShapeDrawable::FillPattern_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* ShapeDrawable_LineStyle_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShapeDrawable_LineStyle_descriptor_;
}
bool ShapeDrawable_LineStyle_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ShapeDrawable_LineStyle ShapeDrawable::Dashed;
const ShapeDrawable_LineStyle ShapeDrawable::Dotted;
const ShapeDrawable_LineStyle ShapeDrawable::SolidLine;
const ShapeDrawable_LineStyle ShapeDrawable::LineStyle_MIN;
const ShapeDrawable_LineStyle ShapeDrawable::LineStyle_MAX;
const int ShapeDrawable::LineStyle_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* ShapeDrawable_ShapeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShapeDrawable_ShapeType_descriptor_;
}
bool ShapeDrawable_ShapeType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ShapeDrawable_ShapeType ShapeDrawable::Circle;
const ShapeDrawable_ShapeType ShapeDrawable::Rectangle;
const ShapeDrawable_ShapeType ShapeDrawable::Line;
const ShapeDrawable_ShapeType ShapeDrawable::Text;
const ShapeDrawable_ShapeType ShapeDrawable::ShapeType_MIN;
const ShapeDrawable_ShapeType ShapeDrawable::ShapeType_MAX;
const int ShapeDrawable::ShapeType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ShapeDrawable::kIdFieldNumber;
const int ShapeDrawable::kNameFieldNumber;
const int ShapeDrawable::kWidthFieldNumber;
const int ShapeDrawable::kHeightFieldNumber;
const int ShapeDrawable::kXFieldNumber;
const int ShapeDrawable::kYFieldNumber;
const int ShapeDrawable::kLineColorArgbFieldNumber;
const int ShapeDrawable::kLineWidthFieldNumber;
const int ShapeDrawable::kLineStyleFieldNumber;
const int ShapeDrawable::kFillPatternFieldNumber;
const int ShapeDrawable::kFillColorArgbFieldNumber;
const int ShapeDrawable::kShapeTypeFieldNumber;
const int ShapeDrawable::kTextFieldNumber;
#endif  // !_MSC_VER

ShapeDrawable::ShapeDrawable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShapeDrawable::InitAsDefaultInstance() {
}

ShapeDrawable::ShapeDrawable(const ShapeDrawable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShapeDrawable::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  width_ = 0;
  height_ = 0;
  x_ = 0;
  y_ = 0;
  line_color_argb_ = 0;
  line_width_ = 0;
  line_style_ = 2;
  fill_pattern_ = 6;
  fill_color_argb_ = 0;
  shape_type_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShapeDrawable::~ShapeDrawable() {
  SharedDtor();
}

void ShapeDrawable::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void ShapeDrawable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShapeDrawable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShapeDrawable_descriptor_;
}

const ShapeDrawable& ShapeDrawable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Drawable_2eproto();  return *default_instance_;
}

ShapeDrawable* ShapeDrawable::default_instance_ = NULL;

ShapeDrawable* ShapeDrawable::New() const {
  return new ShapeDrawable;
}

void ShapeDrawable::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    width_ = 0;
    height_ = 0;
    x_ = 0;
    y_ = 0;
    line_color_argb_ = 0;
    line_width_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    line_style_ = 2;
    fill_pattern_ = 6;
    fill_color_argb_ = 0;
    shape_type_ = 0;
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShapeDrawable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_width;
        break;
      }
      
      // required float width = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_height;
        break;
      }
      
      // required float height = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_x;
        break;
      }
      
      // required float x = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_y;
        break;
      }
      
      // required float y = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_line_color_argb;
        break;
      }
      
      // required int32 line_color_argb = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_line_color_argb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &line_color_argb_)));
          set_has_line_color_argb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_line_width;
        break;
      }
      
      // required float line_width = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_line_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &line_width_)));
          set_has_line_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_line_style;
        break;
      }
      
      // optional .ShapeDrawable.LineStyle line_style = 9 [default = SolidLine];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_line_style:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ShapeDrawable_LineStyle_IsValid(value)) {
            set_line_style(static_cast< ::ShapeDrawable_LineStyle >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_fill_pattern;
        break;
      }
      
      // optional .ShapeDrawable.FillPattern fill_pattern = 10 [default = SolidFill];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fill_pattern:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ShapeDrawable_FillPattern_IsValid(value)) {
            set_fill_pattern(static_cast< ::ShapeDrawable_FillPattern >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_fill_color_argb;
        break;
      }
      
      // required int32 fill_color_argb = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fill_color_argb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fill_color_argb_)));
          set_has_fill_color_argb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_shape_type;
        break;
      }
      
      // required .ShapeDrawable.ShapeType shape_type = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shape_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ShapeDrawable_ShapeType_IsValid(value)) {
            set_shape_type(static_cast< ::ShapeDrawable_ShapeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_text;
        break;
      }
      
      // optional string text = 13 [default = ""];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((800u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShapeDrawable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // required float width = 3;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->width(), output);
  }
  
  // required float height = 4;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->height(), output);
  }
  
  // required float x = 5;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->x(), output);
  }
  
  // required float y = 6;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->y(), output);
  }
  
  // required int32 line_color_argb = 7;
  if (has_line_color_argb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->line_color_argb(), output);
  }
  
  // required float line_width = 8;
  if (has_line_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->line_width(), output);
  }
  
  // optional .ShapeDrawable.LineStyle line_style = 9 [default = SolidLine];
  if (has_line_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->line_style(), output);
  }
  
  // optional .ShapeDrawable.FillPattern fill_pattern = 10 [default = SolidFill];
  if (has_fill_pattern()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->fill_pattern(), output);
  }
  
  // required int32 fill_color_argb = 11;
  if (has_fill_color_argb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->fill_color_argb(), output);
  }
  
  // required .ShapeDrawable.ShapeType shape_type = 12;
  if (has_shape_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->shape_type(), output);
  }
  
  // optional string text = 13 [default = ""];
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->text(), output);
  }
  
  // Extension range [100, 536870912)
  _extensions_.SerializeWithCachedSizes(
      100, 536870912, output);
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShapeDrawable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // required float width = 3;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->width(), target);
  }
  
  // required float height = 4;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->height(), target);
  }
  
  // required float x = 5;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->x(), target);
  }
  
  // required float y = 6;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->y(), target);
  }
  
  // required int32 line_color_argb = 7;
  if (has_line_color_argb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->line_color_argb(), target);
  }
  
  // required float line_width = 8;
  if (has_line_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->line_width(), target);
  }
  
  // optional .ShapeDrawable.LineStyle line_style = 9 [default = SolidLine];
  if (has_line_style()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->line_style(), target);
  }
  
  // optional .ShapeDrawable.FillPattern fill_pattern = 10 [default = SolidFill];
  if (has_fill_pattern()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->fill_pattern(), target);
  }
  
  // required int32 fill_color_argb = 11;
  if (has_fill_color_argb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->fill_color_argb(), target);
  }
  
  // required .ShapeDrawable.ShapeType shape_type = 12;
  if (has_shape_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->shape_type(), target);
  }
  
  // optional string text = 13 [default = ""];
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->text(), target);
  }
  
  // Extension range [100, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 536870912, target);
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShapeDrawable::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required float width = 3;
    if (has_width()) {
      total_size += 1 + 4;
    }
    
    // required float height = 4;
    if (has_height()) {
      total_size += 1 + 4;
    }
    
    // required float x = 5;
    if (has_x()) {
      total_size += 1 + 4;
    }
    
    // required float y = 6;
    if (has_y()) {
      total_size += 1 + 4;
    }
    
    // required int32 line_color_argb = 7;
    if (has_line_color_argb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->line_color_argb());
    }
    
    // required float line_width = 8;
    if (has_line_width()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .ShapeDrawable.LineStyle line_style = 9 [default = SolidLine];
    if (has_line_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->line_style());
    }
    
    // optional .ShapeDrawable.FillPattern fill_pattern = 10 [default = SolidFill];
    if (has_fill_pattern()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->fill_pattern());
    }
    
    // required int32 fill_color_argb = 11;
    if (has_fill_color_argb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fill_color_argb());
    }
    
    // required .ShapeDrawable.ShapeType shape_type = 12;
    if (has_shape_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->shape_type());
    }
    
    // optional string text = 13 [default = ""];
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }
    
  }
  total_size += _extensions_.ByteSize();
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShapeDrawable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShapeDrawable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShapeDrawable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShapeDrawable::MergeFrom(const ShapeDrawable& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_line_color_argb()) {
      set_line_color_argb(from.line_color_argb());
    }
    if (from.has_line_width()) {
      set_line_width(from.line_width());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_line_style()) {
      set_line_style(from.line_style());
    }
    if (from.has_fill_pattern()) {
      set_fill_pattern(from.fill_pattern());
    }
    if (from.has_fill_color_argb()) {
      set_fill_color_argb(from.fill_color_argb());
    }
    if (from.has_shape_type()) {
      set_shape_type(from.shape_type());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShapeDrawable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShapeDrawable::CopyFrom(const ShapeDrawable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShapeDrawable::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000cff) != 0x00000cff) return false;
  
  
  if (!_extensions_.IsInitialized()) return false;  return true;
}

void ShapeDrawable::Swap(ShapeDrawable* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(line_color_argb_, other->line_color_argb_);
    std::swap(line_width_, other->line_width_);
    std::swap(line_style_, other->line_style_);
    std::swap(fill_pattern_, other->fill_pattern_);
    std::swap(fill_color_argb_, other->fill_color_argb_);
    std::swap(shape_type_, other->shape_type_);
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata ShapeDrawable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShapeDrawable_descriptor_;
  metadata.reflection = ShapeDrawable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DrawableFrame::kFrameNumberFieldNumber;
const int DrawableFrame::kShapesFieldNumber;
const int DrawableFrame::kClearDrawablesFieldNumber;
#endif  // !_MSC_VER

DrawableFrame::DrawableFrame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DrawableFrame::InitAsDefaultInstance() {
}

DrawableFrame::DrawableFrame(const DrawableFrame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DrawableFrame::SharedCtor() {
  _cached_size_ = 0;
  frame_number_ = 0;
  cleardrawables_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DrawableFrame::~DrawableFrame() {
  SharedDtor();
}

void DrawableFrame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DrawableFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DrawableFrame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DrawableFrame_descriptor_;
}

const DrawableFrame& DrawableFrame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Drawable_2eproto();  return *default_instance_;
}

DrawableFrame* DrawableFrame::default_instance_ = NULL;

DrawableFrame* DrawableFrame::New() const {
  return new DrawableFrame;
}

void DrawableFrame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    frame_number_ = 0;
    cleardrawables_ = false;
  }
  shapes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DrawableFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 frame_number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frame_number_)));
          set_has_frame_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_shapes;
        break;
      }
      
      // repeated .ShapeDrawable shapes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shapes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shapes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_shapes;
        if (input->ExpectTag(24)) goto parse_clearDrawables;
        break;
      }
      
      // optional bool clearDrawables = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clearDrawables:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cleardrawables_)));
          set_has_cleardrawables();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DrawableFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 frame_number = 1;
  if (has_frame_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->frame_number(), output);
  }
  
  // repeated .ShapeDrawable shapes = 2;
  for (int i = 0; i < this->shapes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->shapes(i), output);
  }
  
  // optional bool clearDrawables = 3 [default = false];
  if (has_cleardrawables()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->cleardrawables(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DrawableFrame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 frame_number = 1;
  if (has_frame_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->frame_number(), target);
  }
  
  // repeated .ShapeDrawable shapes = 2;
  for (int i = 0; i < this->shapes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->shapes(i), target);
  }
  
  // optional bool clearDrawables = 3 [default = false];
  if (has_cleardrawables()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->cleardrawables(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DrawableFrame::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 frame_number = 1;
    if (has_frame_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frame_number());
    }
    
    // optional bool clearDrawables = 3 [default = false];
    if (has_cleardrawables()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .ShapeDrawable shapes = 2;
  total_size += 1 * this->shapes_size();
  for (int i = 0; i < this->shapes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shapes(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DrawableFrame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DrawableFrame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DrawableFrame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DrawableFrame::MergeFrom(const DrawableFrame& from) {
  GOOGLE_CHECK_NE(&from, this);
  shapes_.MergeFrom(from.shapes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_frame_number()) {
      set_frame_number(from.frame_number());
    }
    if (from.has_cleardrawables()) {
      set_cleardrawables(from.cleardrawables());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DrawableFrame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DrawableFrame::CopyFrom(const DrawableFrame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrawableFrame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < shapes_size(); i++) {
    if (!this->shapes(i).IsInitialized()) return false;
  }
  return true;
}

void DrawableFrame::Swap(DrawableFrame* other) {
  if (other != this) {
    std::swap(frame_number_, other->frame_number_);
    shapes_.Swap(&other->shapes_);
    std::swap(cleardrawables_, other->cleardrawables_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DrawableFrame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DrawableFrame_descriptor_;
  metadata.reflection = DrawableFrame_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
