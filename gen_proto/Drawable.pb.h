// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Drawable.proto

#ifndef PROTOBUF_Drawable_2eproto__INCLUDED
#define PROTOBUF_Drawable_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Drawable_2eproto();
void protobuf_AssignDesc_Drawable_2eproto();
void protobuf_ShutdownFile_Drawable_2eproto();

class ShapeDrawable;
class DrawableFrame;

enum ShapeDrawable_FillPattern {
  ShapeDrawable_FillPattern_DiagonalLines = 0,
  ShapeDrawable_FillPattern_FDiagonalLines = 1,
  ShapeDrawable_FillPattern_HorizontalLines = 2,
  ShapeDrawable_FillPattern_VerticalLines = 3,
  ShapeDrawable_FillPattern_CrossedLines = 4,
  ShapeDrawable_FillPattern_XCrossedLines = 5,
  ShapeDrawable_FillPattern_SolidFill = 6,
  ShapeDrawable_FillPattern_NoFill = 7
};
bool ShapeDrawable_FillPattern_IsValid(int value);
const ShapeDrawable_FillPattern ShapeDrawable_FillPattern_FillPattern_MIN = ShapeDrawable_FillPattern_DiagonalLines;
const ShapeDrawable_FillPattern ShapeDrawable_FillPattern_FillPattern_MAX = ShapeDrawable_FillPattern_NoFill;
const int ShapeDrawable_FillPattern_FillPattern_ARRAYSIZE = ShapeDrawable_FillPattern_FillPattern_MAX + 1;

const ::google::protobuf::EnumDescriptor* ShapeDrawable_FillPattern_descriptor();
inline const ::std::string& ShapeDrawable_FillPattern_Name(ShapeDrawable_FillPattern value) {
  return ::google::protobuf::internal::NameOfEnum(
    ShapeDrawable_FillPattern_descriptor(), value);
}
inline bool ShapeDrawable_FillPattern_Parse(
    const ::std::string& name, ShapeDrawable_FillPattern* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ShapeDrawable_FillPattern>(
    ShapeDrawable_FillPattern_descriptor(), name, value);
}
enum ShapeDrawable_LineStyle {
  ShapeDrawable_LineStyle_Dashed = 0,
  ShapeDrawable_LineStyle_Dotted = 1,
  ShapeDrawable_LineStyle_SolidLine = 2
};
bool ShapeDrawable_LineStyle_IsValid(int value);
const ShapeDrawable_LineStyle ShapeDrawable_LineStyle_LineStyle_MIN = ShapeDrawable_LineStyle_Dashed;
const ShapeDrawable_LineStyle ShapeDrawable_LineStyle_LineStyle_MAX = ShapeDrawable_LineStyle_SolidLine;
const int ShapeDrawable_LineStyle_LineStyle_ARRAYSIZE = ShapeDrawable_LineStyle_LineStyle_MAX + 1;

const ::google::protobuf::EnumDescriptor* ShapeDrawable_LineStyle_descriptor();
inline const ::std::string& ShapeDrawable_LineStyle_Name(ShapeDrawable_LineStyle value) {
  return ::google::protobuf::internal::NameOfEnum(
    ShapeDrawable_LineStyle_descriptor(), value);
}
inline bool ShapeDrawable_LineStyle_Parse(
    const ::std::string& name, ShapeDrawable_LineStyle* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ShapeDrawable_LineStyle>(
    ShapeDrawable_LineStyle_descriptor(), name, value);
}
enum ShapeDrawable_ShapeType {
  ShapeDrawable_ShapeType_Circle = 0,
  ShapeDrawable_ShapeType_Rectangle = 1,
  ShapeDrawable_ShapeType_Line = 2,
  ShapeDrawable_ShapeType_Text = 3
};
bool ShapeDrawable_ShapeType_IsValid(int value);
const ShapeDrawable_ShapeType ShapeDrawable_ShapeType_ShapeType_MIN = ShapeDrawable_ShapeType_Circle;
const ShapeDrawable_ShapeType ShapeDrawable_ShapeType_ShapeType_MAX = ShapeDrawable_ShapeType_Text;
const int ShapeDrawable_ShapeType_ShapeType_ARRAYSIZE = ShapeDrawable_ShapeType_ShapeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ShapeDrawable_ShapeType_descriptor();
inline const ::std::string& ShapeDrawable_ShapeType_Name(ShapeDrawable_ShapeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ShapeDrawable_ShapeType_descriptor(), value);
}
inline bool ShapeDrawable_ShapeType_Parse(
    const ::std::string& name, ShapeDrawable_ShapeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ShapeDrawable_ShapeType>(
    ShapeDrawable_ShapeType_descriptor(), name, value);
}
// ===================================================================

class ShapeDrawable : public ::google::protobuf::Message {
 public:
  ShapeDrawable();
  virtual ~ShapeDrawable();
  
  ShapeDrawable(const ShapeDrawable& from);
  
  inline ShapeDrawable& operator=(const ShapeDrawable& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ShapeDrawable& default_instance();
  
  void Swap(ShapeDrawable* other);
  
  // implements Message ----------------------------------------------
  
  ShapeDrawable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ShapeDrawable& from);
  void MergeFrom(const ShapeDrawable& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef ShapeDrawable_FillPattern FillPattern;
  static const FillPattern DiagonalLines = ShapeDrawable_FillPattern_DiagonalLines;
  static const FillPattern FDiagonalLines = ShapeDrawable_FillPattern_FDiagonalLines;
  static const FillPattern HorizontalLines = ShapeDrawable_FillPattern_HorizontalLines;
  static const FillPattern VerticalLines = ShapeDrawable_FillPattern_VerticalLines;
  static const FillPattern CrossedLines = ShapeDrawable_FillPattern_CrossedLines;
  static const FillPattern XCrossedLines = ShapeDrawable_FillPattern_XCrossedLines;
  static const FillPattern SolidFill = ShapeDrawable_FillPattern_SolidFill;
  static const FillPattern NoFill = ShapeDrawable_FillPattern_NoFill;
  static inline bool FillPattern_IsValid(int value) {
    return ShapeDrawable_FillPattern_IsValid(value);
  }
  static const FillPattern FillPattern_MIN =
    ShapeDrawable_FillPattern_FillPattern_MIN;
  static const FillPattern FillPattern_MAX =
    ShapeDrawable_FillPattern_FillPattern_MAX;
  static const int FillPattern_ARRAYSIZE =
    ShapeDrawable_FillPattern_FillPattern_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FillPattern_descriptor() {
    return ShapeDrawable_FillPattern_descriptor();
  }
  static inline const ::std::string& FillPattern_Name(FillPattern value) {
    return ShapeDrawable_FillPattern_Name(value);
  }
  static inline bool FillPattern_Parse(const ::std::string& name,
      FillPattern* value) {
    return ShapeDrawable_FillPattern_Parse(name, value);
  }
  
  typedef ShapeDrawable_LineStyle LineStyle;
  static const LineStyle Dashed = ShapeDrawable_LineStyle_Dashed;
  static const LineStyle Dotted = ShapeDrawable_LineStyle_Dotted;
  static const LineStyle SolidLine = ShapeDrawable_LineStyle_SolidLine;
  static inline bool LineStyle_IsValid(int value) {
    return ShapeDrawable_LineStyle_IsValid(value);
  }
  static const LineStyle LineStyle_MIN =
    ShapeDrawable_LineStyle_LineStyle_MIN;
  static const LineStyle LineStyle_MAX =
    ShapeDrawable_LineStyle_LineStyle_MAX;
  static const int LineStyle_ARRAYSIZE =
    ShapeDrawable_LineStyle_LineStyle_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LineStyle_descriptor() {
    return ShapeDrawable_LineStyle_descriptor();
  }
  static inline const ::std::string& LineStyle_Name(LineStyle value) {
    return ShapeDrawable_LineStyle_Name(value);
  }
  static inline bool LineStyle_Parse(const ::std::string& name,
      LineStyle* value) {
    return ShapeDrawable_LineStyle_Parse(name, value);
  }
  
  typedef ShapeDrawable_ShapeType ShapeType;
  static const ShapeType Circle = ShapeDrawable_ShapeType_Circle;
  static const ShapeType Rectangle = ShapeDrawable_ShapeType_Rectangle;
  static const ShapeType Line = ShapeDrawable_ShapeType_Line;
  static const ShapeType Text = ShapeDrawable_ShapeType_Text;
  static inline bool ShapeType_IsValid(int value) {
    return ShapeDrawable_ShapeType_IsValid(value);
  }
  static const ShapeType ShapeType_MIN =
    ShapeDrawable_ShapeType_ShapeType_MIN;
  static const ShapeType ShapeType_MAX =
    ShapeDrawable_ShapeType_ShapeType_MAX;
  static const int ShapeType_ARRAYSIZE =
    ShapeDrawable_ShapeType_ShapeType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ShapeType_descriptor() {
    return ShapeDrawable_ShapeType_descriptor();
  }
  static inline const ::std::string& ShapeType_Name(ShapeType value) {
    return ShapeDrawable_ShapeType_Name(value);
  }
  static inline bool ShapeType_Parse(const ::std::string& name,
      ShapeType* value) {
    return ShapeDrawable_ShapeType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required float width = 3;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 3;
  inline float width() const;
  inline void set_width(float value);
  
  // required float height = 4;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 4;
  inline float height() const;
  inline void set_height(float value);
  
  // required float x = 5;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 5;
  inline float x() const;
  inline void set_x(float value);
  
  // required float y = 6;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 6;
  inline float y() const;
  inline void set_y(float value);
  
  // required int32 line_color_argb = 7;
  inline bool has_line_color_argb() const;
  inline void clear_line_color_argb();
  static const int kLineColorArgbFieldNumber = 7;
  inline ::google::protobuf::int32 line_color_argb() const;
  inline void set_line_color_argb(::google::protobuf::int32 value);
  
  // required float line_width = 8;
  inline bool has_line_width() const;
  inline void clear_line_width();
  static const int kLineWidthFieldNumber = 8;
  inline float line_width() const;
  inline void set_line_width(float value);
  
  // optional .ShapeDrawable.LineStyle line_style = 9 [default = SolidLine];
  inline bool has_line_style() const;
  inline void clear_line_style();
  static const int kLineStyleFieldNumber = 9;
  inline ::ShapeDrawable_LineStyle line_style() const;
  inline void set_line_style(::ShapeDrawable_LineStyle value);
  
  // optional .ShapeDrawable.FillPattern fill_pattern = 10 [default = SolidFill];
  inline bool has_fill_pattern() const;
  inline void clear_fill_pattern();
  static const int kFillPatternFieldNumber = 10;
  inline ::ShapeDrawable_FillPattern fill_pattern() const;
  inline void set_fill_pattern(::ShapeDrawable_FillPattern value);
  
  // required int32 fill_color_argb = 11;
  inline bool has_fill_color_argb() const;
  inline void clear_fill_color_argb();
  static const int kFillColorArgbFieldNumber = 11;
  inline ::google::protobuf::int32 fill_color_argb() const;
  inline void set_fill_color_argb(::google::protobuf::int32 value);
  
  // required .ShapeDrawable.ShapeType shape_type = 12;
  inline bool has_shape_type() const;
  inline void clear_shape_type();
  static const int kShapeTypeFieldNumber = 12;
  inline ::ShapeDrawable_ShapeType shape_type() const;
  inline void set_shape_type(::ShapeDrawable_ShapeType value);
  
  // optional string text = 13 [default = ""];
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 13;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  
  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(ShapeDrawable)
  // @@protoc_insertion_point(class_scope:ShapeDrawable)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_line_color_argb();
  inline void clear_has_line_color_argb();
  inline void set_has_line_width();
  inline void clear_has_line_width();
  inline void set_has_line_style();
  inline void clear_has_line_style();
  inline void set_has_fill_pattern();
  inline void clear_has_fill_pattern();
  inline void set_has_fill_color_argb();
  inline void clear_has_fill_color_argb();
  inline void set_has_shape_type();
  inline void clear_has_shape_type();
  inline void set_has_text();
  inline void clear_has_text();
  
  ::google::protobuf::internal::ExtensionSet _extensions_;
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::int32 id_;
  float width_;
  float height_;
  float x_;
  float y_;
  ::google::protobuf::int32 line_color_argb_;
  float line_width_;
  int line_style_;
  int fill_pattern_;
  ::google::protobuf::int32 fill_color_argb_;
  ::std::string* text_;
  int shape_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];
  
  friend void  protobuf_AddDesc_Drawable_2eproto();
  friend void protobuf_AssignDesc_Drawable_2eproto();
  friend void protobuf_ShutdownFile_Drawable_2eproto();
  
  void InitAsDefaultInstance();
  static ShapeDrawable* default_instance_;
};
// -------------------------------------------------------------------

class DrawableFrame : public ::google::protobuf::Message {
 public:
  DrawableFrame();
  virtual ~DrawableFrame();
  
  DrawableFrame(const DrawableFrame& from);
  
  inline DrawableFrame& operator=(const DrawableFrame& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DrawableFrame& default_instance();
  
  void Swap(DrawableFrame* other);
  
  // implements Message ----------------------------------------------
  
  DrawableFrame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DrawableFrame& from);
  void MergeFrom(const DrawableFrame& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 frame_number = 1;
  inline bool has_frame_number() const;
  inline void clear_frame_number();
  static const int kFrameNumberFieldNumber = 1;
  inline ::google::protobuf::int32 frame_number() const;
  inline void set_frame_number(::google::protobuf::int32 value);
  
  // repeated .ShapeDrawable shapes = 2;
  inline int shapes_size() const;
  inline void clear_shapes();
  static const int kShapesFieldNumber = 2;
  inline const ::ShapeDrawable& shapes(int index) const;
  inline ::ShapeDrawable* mutable_shapes(int index);
  inline ::ShapeDrawable* add_shapes();
  inline const ::google::protobuf::RepeatedPtrField< ::ShapeDrawable >&
      shapes() const;
  inline ::google::protobuf::RepeatedPtrField< ::ShapeDrawable >*
      mutable_shapes();
  
  // optional bool clearDrawables = 3 [default = false];
  inline bool has_cleardrawables() const;
  inline void clear_cleardrawables();
  static const int kClearDrawablesFieldNumber = 3;
  inline bool cleardrawables() const;
  inline void set_cleardrawables(bool value);
  
  // @@protoc_insertion_point(class_scope:DrawableFrame)
 private:
  inline void set_has_frame_number();
  inline void clear_has_frame_number();
  inline void set_has_cleardrawables();
  inline void clear_has_cleardrawables();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::ShapeDrawable > shapes_;
  ::google::protobuf::int32 frame_number_;
  bool cleardrawables_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_Drawable_2eproto();
  friend void protobuf_AssignDesc_Drawable_2eproto();
  friend void protobuf_ShutdownFile_Drawable_2eproto();
  
  void InitAsDefaultInstance();
  static DrawableFrame* default_instance_;
};
// ===================================================================


// ===================================================================

// ShapeDrawable

// required int32 id = 1;
inline bool ShapeDrawable::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShapeDrawable::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShapeDrawable::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShapeDrawable::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ShapeDrawable::id() const {
  return id_;
}
inline void ShapeDrawable::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required string name = 2;
inline bool ShapeDrawable::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShapeDrawable::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShapeDrawable::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShapeDrawable::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ShapeDrawable::name() const {
  return *name_;
}
inline void ShapeDrawable::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ShapeDrawable::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ShapeDrawable::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ShapeDrawable::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ShapeDrawable::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required float width = 3;
inline bool ShapeDrawable::has_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ShapeDrawable::set_has_width() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ShapeDrawable::clear_has_width() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ShapeDrawable::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline float ShapeDrawable::width() const {
  return width_;
}
inline void ShapeDrawable::set_width(float value) {
  set_has_width();
  width_ = value;
}

// required float height = 4;
inline bool ShapeDrawable::has_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ShapeDrawable::set_has_height() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ShapeDrawable::clear_has_height() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ShapeDrawable::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline float ShapeDrawable::height() const {
  return height_;
}
inline void ShapeDrawable::set_height(float value) {
  set_has_height();
  height_ = value;
}

// required float x = 5;
inline bool ShapeDrawable::has_x() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ShapeDrawable::set_has_x() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ShapeDrawable::clear_has_x() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ShapeDrawable::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float ShapeDrawable::x() const {
  return x_;
}
inline void ShapeDrawable::set_x(float value) {
  set_has_x();
  x_ = value;
}

// required float y = 6;
inline bool ShapeDrawable::has_y() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ShapeDrawable::set_has_y() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ShapeDrawable::clear_has_y() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ShapeDrawable::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float ShapeDrawable::y() const {
  return y_;
}
inline void ShapeDrawable::set_y(float value) {
  set_has_y();
  y_ = value;
}

// required int32 line_color_argb = 7;
inline bool ShapeDrawable::has_line_color_argb() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ShapeDrawable::set_has_line_color_argb() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ShapeDrawable::clear_has_line_color_argb() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ShapeDrawable::clear_line_color_argb() {
  line_color_argb_ = 0;
  clear_has_line_color_argb();
}
inline ::google::protobuf::int32 ShapeDrawable::line_color_argb() const {
  return line_color_argb_;
}
inline void ShapeDrawable::set_line_color_argb(::google::protobuf::int32 value) {
  set_has_line_color_argb();
  line_color_argb_ = value;
}

// required float line_width = 8;
inline bool ShapeDrawable::has_line_width() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ShapeDrawable::set_has_line_width() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ShapeDrawable::clear_has_line_width() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ShapeDrawable::clear_line_width() {
  line_width_ = 0;
  clear_has_line_width();
}
inline float ShapeDrawable::line_width() const {
  return line_width_;
}
inline void ShapeDrawable::set_line_width(float value) {
  set_has_line_width();
  line_width_ = value;
}

// optional .ShapeDrawable.LineStyle line_style = 9 [default = SolidLine];
inline bool ShapeDrawable::has_line_style() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ShapeDrawable::set_has_line_style() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ShapeDrawable::clear_has_line_style() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ShapeDrawable::clear_line_style() {
  line_style_ = 2;
  clear_has_line_style();
}
inline ::ShapeDrawable_LineStyle ShapeDrawable::line_style() const {
  return static_cast< ::ShapeDrawable_LineStyle >(line_style_);
}
inline void ShapeDrawable::set_line_style(::ShapeDrawable_LineStyle value) {
  GOOGLE_DCHECK(::ShapeDrawable_LineStyle_IsValid(value));
  set_has_line_style();
  line_style_ = value;
}

// optional .ShapeDrawable.FillPattern fill_pattern = 10 [default = SolidFill];
inline bool ShapeDrawable::has_fill_pattern() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ShapeDrawable::set_has_fill_pattern() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ShapeDrawable::clear_has_fill_pattern() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ShapeDrawable::clear_fill_pattern() {
  fill_pattern_ = 6;
  clear_has_fill_pattern();
}
inline ::ShapeDrawable_FillPattern ShapeDrawable::fill_pattern() const {
  return static_cast< ::ShapeDrawable_FillPattern >(fill_pattern_);
}
inline void ShapeDrawable::set_fill_pattern(::ShapeDrawable_FillPattern value) {
  GOOGLE_DCHECK(::ShapeDrawable_FillPattern_IsValid(value));
  set_has_fill_pattern();
  fill_pattern_ = value;
}

// required int32 fill_color_argb = 11;
inline bool ShapeDrawable::has_fill_color_argb() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ShapeDrawable::set_has_fill_color_argb() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ShapeDrawable::clear_has_fill_color_argb() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ShapeDrawable::clear_fill_color_argb() {
  fill_color_argb_ = 0;
  clear_has_fill_color_argb();
}
inline ::google::protobuf::int32 ShapeDrawable::fill_color_argb() const {
  return fill_color_argb_;
}
inline void ShapeDrawable::set_fill_color_argb(::google::protobuf::int32 value) {
  set_has_fill_color_argb();
  fill_color_argb_ = value;
}

// required .ShapeDrawable.ShapeType shape_type = 12;
inline bool ShapeDrawable::has_shape_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ShapeDrawable::set_has_shape_type() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ShapeDrawable::clear_has_shape_type() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ShapeDrawable::clear_shape_type() {
  shape_type_ = 0;
  clear_has_shape_type();
}
inline ::ShapeDrawable_ShapeType ShapeDrawable::shape_type() const {
  return static_cast< ::ShapeDrawable_ShapeType >(shape_type_);
}
inline void ShapeDrawable::set_shape_type(::ShapeDrawable_ShapeType value) {
  GOOGLE_DCHECK(::ShapeDrawable_ShapeType_IsValid(value));
  set_has_shape_type();
  shape_type_ = value;
}

// optional string text = 13 [default = ""];
inline bool ShapeDrawable::has_text() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ShapeDrawable::set_has_text() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ShapeDrawable::clear_has_text() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ShapeDrawable::clear_text() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& ShapeDrawable::text() const {
  return *text_;
}
inline void ShapeDrawable::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void ShapeDrawable::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void ShapeDrawable::set_text(const char* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ShapeDrawable::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  return text_;
}
inline ::std::string* ShapeDrawable::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// DrawableFrame

// required int32 frame_number = 1;
inline bool DrawableFrame::has_frame_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DrawableFrame::set_has_frame_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DrawableFrame::clear_has_frame_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DrawableFrame::clear_frame_number() {
  frame_number_ = 0;
  clear_has_frame_number();
}
inline ::google::protobuf::int32 DrawableFrame::frame_number() const {
  return frame_number_;
}
inline void DrawableFrame::set_frame_number(::google::protobuf::int32 value) {
  set_has_frame_number();
  frame_number_ = value;
}

// repeated .ShapeDrawable shapes = 2;
inline int DrawableFrame::shapes_size() const {
  return shapes_.size();
}
inline void DrawableFrame::clear_shapes() {
  shapes_.Clear();
}
inline const ::ShapeDrawable& DrawableFrame::shapes(int index) const {
  return shapes_.Get(index);
}
inline ::ShapeDrawable* DrawableFrame::mutable_shapes(int index) {
  return shapes_.Mutable(index);
}
inline ::ShapeDrawable* DrawableFrame::add_shapes() {
  return shapes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ShapeDrawable >&
DrawableFrame::shapes() const {
  return shapes_;
}
inline ::google::protobuf::RepeatedPtrField< ::ShapeDrawable >*
DrawableFrame::mutable_shapes() {
  return &shapes_;
}

// optional bool clearDrawables = 3 [default = false];
inline bool DrawableFrame::has_cleardrawables() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DrawableFrame::set_has_cleardrawables() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DrawableFrame::clear_has_cleardrawables() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DrawableFrame::clear_cleardrawables() {
  cleardrawables_ = false;
  clear_has_cleardrawables();
}
inline bool DrawableFrame::cleardrawables() const {
  return cleardrawables_;
}
inline void DrawableFrame::set_cleardrawables(bool value) {
  set_has_cleardrawables();
  cleardrawables_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ShapeDrawable_FillPattern>() {
  return ::ShapeDrawable_FillPattern_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ShapeDrawable_LineStyle>() {
  return ::ShapeDrawable_LineStyle_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ShapeDrawable_ShapeType>() {
  return ::ShapeDrawable_ShapeType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Drawable_2eproto__INCLUDED
